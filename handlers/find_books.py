import hashlib

from aiogram import types

from keyboards.small_keyboard import get_small_keyboard, pagination_call
from loader import dp
from utils.check_args import check_args
from utils.pages.generate_pages import create_pages, get_page
from utils.parsing.books import search_books
from utils.parsing.general import get

BOOKS_LST = []
CURRENT_BOOK = ''


@dp.message_handler()
async def find_books(message: types.Message):
    # –≠—Ö–æ —Ö–µ–Ω–¥–ª–µ—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–Ω–∏–≥–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å—ë –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞
    global BOOKS_LST, CURRENT_BOOK

    text = check_args(message.text, 'book')  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø—É—Å—Ç—ã –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–∞ –∫–æ–º–∞–Ω–¥—É /book
    if text: return await message.answer(text)

    url = f'http://flibusta.is//booksearch?ask={message.text}&chb=on'
    # url = f'http://flibustahezeous3.onion/booksearch?ask={message.text}&chb=on'
    soup = await get(url)

    if not search_books(soup):
        return await message.reply(text='–ü–æ –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! üòî\n' \
                                        '–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ üòå')

    parse_dict, count_books = search_books(soup)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∏ –∫–æ–ª-–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥

    CURRENT_BOOK = hashlib.md5(
        message.text.encode()).hexdigest()  # –•–µ—à–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –æ–±–æ–π—Ç–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 64 –±–∞–π—Ç–∞ –¥–ª—è CallbackData
    BOOKS_LST = create_pages(parse_dict, count_books, 'books')  # –û–±—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥

    current_page = get_page(items_list=BOOKS_LST)
    await message.answer(current_page,
                         reply_markup=get_small_keyboard(
                             count_pages=len(BOOKS_LST), key=CURRENT_BOOK, method='book'))


@dp.callback_query_handler(pagination_call.filter(page='current_page'))
async def current_page_error(call: types.CallbackQuery):
    # —É–±–∏—Ä–∞–µ–º —á–∞—Å–∏–∫–∏ –ø–æ –Ω–∞–∂–∞–Ω–∏—é –Ω–∞ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await call.answer(cache_time=60)


# –ü–∞–≥–∏–Ω–∞—Ü–∏—è
@dp.callback_query_handler(pagination_call.filter(method='book'))
async def show_chosen_page(call: types.CallbackQuery, callback_data: dict):
    if callback_data['key'] != CURRENT_BOOK:
        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–∞–≥–∞–Ω–∏—Ü–∏–∏
        return await call.answer(cache_time=60)

    current_page = int(callback_data.get('pages'))
    current_page_text = get_page(items_list=BOOKS_LST, page=current_page)

    markup = get_small_keyboard(count_pages=len(BOOKS_LST), key=CURRENT_BOOK, page=current_page, method='book')
    await call.message.edit_text(current_page_text, reply_markup=markup)
